---

# setup global variables

- hosts: all
  gather_facts: false

  tasks:
    - name: Setup all variables
      set_fact:
        k8s_version: 1.13.3
        pkg_version: 1.13.3-00
        cni_version: 0.6.0-00
        docker_gpg_url: https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg 
        docker_repo: deb https://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic stable
        kube_gpg_url: https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg
        kube_repo: deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main



# make preparations and intall packages

- hosts: all

  tasks:

    - name: Disable swap
      command: swapoff -a
      changed_when: false

    - name: Ensure swap not mounted
      mount:
        name: swap
        fstype: swap
        state: absent

    - name: Comment out swap settings in fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#]+?\sswap\s+sw\s+.*)$'
        replace: '# \1'

    - name: Do sync (may be not helpful)
      shell:
        cmd: sync && sync -f && sleep 3 && sync && sync -f
      changed_when: false

    - name: Install required apt packages
      apt:
        name:
          - ca-certificates
          - curl
          - aptitude
          - apt-transport-https
          - software-properties-common
          - virtualenv
          - python-apt
          - python3-apt
          - python3-setuptools
          - python3-pip
        state: present
        update_cache: yes

    - name: Add Docker GPG apt Key
      apt_key:
        url: "{{ docker_gpg_url }}"
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: "{{ docker_repo }}"
        state: present

    - name: Update apt and install docker-ce
      apt:
        name: docker-ce
        state: present
        update_cache: yes

    - name: Ensure docker cgroup driver
      copy:
        src: ./etc_docker_daemon.json
        dest: /etc/docker/daemon.json
      notify:
        - Restart docker

    - name: Add kube* GPG apt Key
      apt_key:
        url: "{{ kube_gpg_url }}"
        state: present

    - name: Add kube* Repository
      apt_repository:
        repo: "{{ kube_repo }}"
        state: present

    - name: Ensure latest kube-utils installed
      apt:
        name: 
          - kubeadm={{ pkg_version }}
          - kubelet={{ pkg_version }}
          - kubectl={{ pkg_version }}
          - kubernetes-cni={{ cni_version }}
        state:  present
        update_cache: yes
      notify:
        - Restart kubelet

  handlers:
    - name: Restart docker
      systemd:
        name: docker
        state: restarted
        daemon_reload: true
        enabled: true

    - name: Restart kubelet
      systemd:
        name: kubelet
        state: restarted
        daemon_reload: true
        enabled: true



# use kubeadm to setup the k8s cluster

- hosts: master

  tasks:

    - name: Kubeadm init on master
      command:
        argv:
          - kubeadm
          - init
          - --pod-network-cidr=10.244.0.0/16
          - --kubernetes-version={{ k8s_version }}
          - --image-repository=gcr.azk8s.cn/google_containers
        creates: /etc/kubernetes/admin.conf

    - name: Ensure .kube directory exists
      file:
        path: /root/.kube
        state: directory

    - name: Setup kubectl config
      copy:
        remote_src: yes
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config

    - name: Send cni yaml
      copy:
        src: ./canal/
        dest: /root/canal

    - name: Apply cni
      command:
        argv:
          - kubectl
          - apply
          - -f
          - ./{{ item }}
        chdir: /root/canal
      loop:
        - rbac.yaml
        - canal.yaml

    - name: Wait until cni ready
      shell:
        cmd: kubectl -nkube-system get pods | grep canal
      register: result
      until: result.stdout.find("Running") != -1
      retries: 100
      delay: 10

    - name: Untaint controll plane
      command:
        argv:
          - kubectl
          - taint
          - nodes
          - --all
          - node-role.kubernetes.io/master-
      ignore_errors: true

    - name: Retrive kube-join command
      command:
        argv:
          - kubeadm
          - token
          - create
          - --print-join-command
      register: kubeadm_join_command_res
      changed_when: false

    - name: Enject kubeadm join command to workers
      set_fact:
        kubeadm_join_command: "{{ kubeadm_join_command_res.stdout }}"
      delegate_to: "{{ item }}"
      delegate_facts: true
      loop: "{{ groups['all'] }}"

    - name: Ensure workspace exists
      file:
        path: /root/workspace/tools
        state: directory

    - name: Send helm
      unarchive:
        src: ./helm-v2.16.1-linux-amd64.tar.gz
        dest: /root/workspace/tools
        creates: /root/workspace/tools/linux-amd64

    - name: Set helm path
      lineinfile:
        regexp: "export PATH=/root/workspace/tools/linux-amd64:${PATH}"
        line: "export PATH=/root/workspace/tools/linux-amd64:${PATH}"
        state: present
        path: "/root/.bashrc"



- hosts: worker
  gather_facts: false

  tasks:
    - name: Run kubeadm join on workers
      shell:
        cmd: "{{ kubeadm_join_command }}"
        creates: /etc/kubernetes/kubelet.conf
