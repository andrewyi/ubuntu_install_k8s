---

# setup global variables

- hosts: all
  gather_facts: false

  tasks:
    - name: Setup all variables
      set_fact:
        k8s_version: 1.15.0
        pkg_version: 1.15.0-00

        docker_gpg_url: https://download.docker.com/linux/ubuntu/gpg
        docker_gpg_url_cn: https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg 
        docker_repo: deb https://download.docker.com/linux/ubuntu bionic stable
        docker_repo_cn: deb https://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic stable
        kube_gpg_url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        kube_gpg_url_cn: https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg
        kube_repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        kube_repo_cn: deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main



# make preparations and intall packages

- hosts: all

  vars:
    docker_daemon_json_config: |
      {
        "exec-opts": ["native.cgroupdriver=systemd"],
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "100m"
        },
        "storage-driver": "overlay2",
        "storage-opts": [
          "overlay2.override_kernel_check=true"
        ]
      }

  tasks:

    # - name: Disable SELinux # NOTE: no need in debian systems
    # selinux:
    # state: disabled

    # - name: Set SELinux in permissive mode # NOTE: no need in debian systems
    # command: setenforce 0
    # ignore_errors: true
    # changed_when: false

    - name: Disable swap
      command: swapoff -a
      changed_when: false

    - name: Ensure swap not mounted
      mount:
        name: swap
        fstype: swap
        state: absent

    - name: Comment out swap settings in fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#]+?\sswap\s+sw\s+.*)$'
        replace: '# \1'

    - name: Ensure cloud config settings to allow persist hostname
      lineinfile:
        regexp: '^preserve_hostname: (false|true)$'
        line: "preserve_hostname: true"
        state: present
        path: /etc/cloud/cloud.cfg
      ignore_errors: yes

    - name: Set hostname
      hostname:
        name: "{{ inventory_hostname }}"

    - name: Update hosts file with hostname
      lineinfile:
        regexp: "127.0.0.1 {{ inventory_hostname }}"
        line: "127.0.0.1 {{ inventory_hostname }}"
        state: present
        path: /etc/hosts

    - name: Ensure hosts entries exist in /etc/hosts on every node
      lineinfile:
        regex: "{{ hostvars[item]['ansible_facts']['eth0']['ipv4']['address'] }} {{ hostvars[item]['ansible_facts']['hostname'] }}"
        line: "{{ hostvars[item]['ansible_facts']['eth0']['ipv4']['address'] }} {{ hostvars[item]['ansible_facts']['hostname'] }}"
        state:  present
        path: /etc/hosts
      loop: "{{ groups['all'] }}"

    - name: Do sync
      command: bash -c "sync && sleep 3 && sync"
      changed_when: false

    - name: Make a reboot
      reboot:
        connect_timeout: 5
        reboot_timeout: 300
      ignore_errors: true # i found that reconnect may not working

    - name: Install required apt packages
      apt:
        name:
          - aptitude
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
          - python3-apt
        state: present
        update_cache: yes

    - name: Add Docker GPG apt Key
      apt_key:
        url: "{{ docker_gpg_url }}"
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: "{{ docker_repo }}"
        state: present

    - name: Update apt and install docker-ce
      apt:
        name: docker-ce
        state: present
        update_cache: yes

    - name: Ensure docker cgroup driver
      copy:
        content: "{{ docker_daemon_json_config }}"
        dest: /etc/docker/daemon.json
      notify:
        - Restart docker

    - name: Add kube* GPG apt Key
      apt_key:
        url: "{{ kube_gpg_url }}"
        state: present

    - name: Add kube* Repository
      apt_repository:
        repo: "{{ kube_repo }}"
        state: present

    - name: Ensure latest kube-utils installed
      apt:
        name: 
          - kubelet={{ pkg_version }}
          - kubectl={{ pkg_version }}
          - kubeadm={{ pkg_version }}
        state:  present
        update_cache: yes
      notify:
        - Restart kubelet

  handlers:
    - name: Restart docker
      systemd:
        name: docker
        state: restarted
        daemon_reload: true
        enabled: true

    - name: Restart kubelet
      systemd:
        name: kubelet
        state: restarted
        daemon_reload: true
        enabled: true



# use kubeadm to setup the k8s cluster

- hosts: master

  tasks:

    - name: Kubeadm init on master
      command:
        argv:
          - kubeadm
          - init
          - --pod-network-cidr=10.244.0.0/16
          - --kubernetes-version={{ k8s_version }}

    - name: Ensure .kube directory exists
      file:
        path: "{{ ansible_facts['env']['HOME'] }}/.kube"
        owner: "{{ ansible_facts['env']['USER'] }}"
        group : "{{ ansible_facts['env']['USER'] }}"
        state: directory

    - name: Setup kubectl config 
      copy:
        remote_src: yes
        src: /etc/kubernetes/admin.conf 
        dest: "{{ ansible_facts['env']['HOME'] }}/.kube/config"
        owner: "{{ ansible_facts['env']['USER'] }}"
        group : "{{ ansible_facts['env']['USER'] }}"

    - name: Apply cni
      command:
        argv:
          - kubectl
          - apply
          - -f
          - https://docs.projectcalico.org/v3.8/manifests/canal.yaml

    - name: Wait until cni ready
      shell: bash -c "kubectl -nkube-system get pods | grep canal"
      register: result
      until: result.stdout.find("Running") != -1
      retries: 100
      delay: 10

    - name: Retrive kube-join command
      command: kubeadm token create --print-join-command
      register: kubeadm_join_command_res
      changed_when: false

    - name: Enject kubeadm join command to workers
      set_fact:
        kubeadm_join_command: "{{ kubeadm_join_command_res.stdout }}"
      delegate_to: "{{ item }}"
      delegate_facts: true
      loop: "{{ groups['all'] }}"

- hosts: worker
  gather_facts: false

  tasks:
    - name: Run kubeadm join on worker
      command: "{{ kubeadm_join_command }}"


    
